分布式系统设计准则：
可伸缩性     
没有单点失效 -->服务类的企业级应用，每个服务后台实例都要有多个副本；
                数据存储的应用，每份数据也必须要有多个备份
高可靠性  -->企业级服务应用，做负载均衡和服务发现
             针对数据服务，按照某种算法来把整体数据分片，然后按照同样的算法来进行分片查找
			 （对于数据类型的应用，分布式系统同样要保证高可靠的数据服务。
               首先要做数据分片，一台服务器存不下所有数据就分成多份来存，但对数据进行分片必须按照某个规则来进行分片，
               后面查找时要按照同样的规则来进行分片查找，就是一致性。）
数据本地性   -->网络通信开销是分布式系统的瓶颈，要减少网络开销，应当让计算任务去找数据，而不是让数据去找计算

分布式系统要做到统一管理集群的所有服务器，屏蔽底层管理细节，
诸如容错、调度、通信等，让开发人员觉得分布式集群在逻辑上是一台服务器。

Mesos可以理解成一个分布式的Kernel，只分配集群计算资源，不负责任务调度。

Marathon和Chonos是基于Mesos来做任务调度。
Marathon和Chonos基于Mesos做任务调度时，一定是动态调度，也就是每个任务在执行之前是不知道它将来在哪一台服务器上执行和绑定哪一个端口。

为了减少硬件故障对应用服务的影响，应用程序要尽量做到无状态。
无状态的好处是在程序受到影响时不需要进行任何恢复，这样这个程序只要重新调度起来就可以。
无状态要求把状态数据放到存储服务器或者是消息队列里面，这样的好处是容错时恢复起来会变得很方便。

因为Mesos和Docker已经是无缝结合起来。通过Marathon和Chronos提交服务型应用和批处理型应用。
Marathon和Chronos通过RESTful的方式提交任务，用JSON脚本设定应用的后台实例个数、应用的参数、以及Docker Images的路径等等。

分布式环境下，程序不是运行在本地，而是在集群上面，没有监控就等于程序运行在黑盒子下，无法调优，必须要有监控。
分布式环境下的监控分为两个部分，一是性能监控，另一个是报警。
性能监控要知道每个应用程序运行状态是什么样，即每一个应用程序占了多少CPU内存、服务的请求处理延迟等。


